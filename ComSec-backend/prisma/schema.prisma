generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  type      type     @default(guest)
  email     String   @db.VarChar(320)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-Many relationship
  companies Company[]

  @@map("users")
}

model Company {
  id               Int                     @id @default(autoincrement())
  nameEnglish      String
  nameChinese      String
  type             CompanyType
  code             String
  natureOfBusiness String
  email            String
  telephone        String
  fax              String?
  address          Address                 @relation(fields: [addressId], references: [id])
  addressId        Int                     @unique
  logo             String? // URL to the company logo
  businessFee      BusinessRegistrationFee
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  presentorReferenceId Int
  presentorReference   PresentorReference? @relation(fields: [presentorReferenceId], references: [id])
  shares               ShareCapital[] // One-to-Many relation
  shareHolders         Shareholder[] // One-to-Many relation
  directors            Director[] // One-to-Many relation
  companySecretary     CompanySecretary? // One-to-One relation
  document             Document[]

  status CompanyStatus @default(started)

  projectType       ProjectType @default(incorporation)
  incorporationDate DateTime?
  // businessRegistrationNumber String        @default("")
  financialYearEnd  DateTime?
  annualReturnDate  DateTime?

  startDate                     DateTime  @default(now()) // incorporation date
  processedBy                   String?
  completeDate                  DateTime?
  certificateOfIncorporationUrl String?
  registrationNumber            String?
  registrationNoticeUrl         String?
  receiptUrl                    String?

  // Foreign Key to User [account-users]
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("companies")
}

model Document {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, companyId])
  @@map("documents")
}

model Config {
  id     Int     @id @default(autoincrement())
  key    String  @unique
  value  String
  reason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("config")
}

model Address {
  id        Int      @id @default(autoincrement())
  flatFloor String
  building  String
  street    String
  district  String
  city      String // check if populated
  company   Company? @relation

  @@map("addresses")
}

model PresentorReference {
  id                  Int       @id @default(autoincrement())
  nameEnglish         String
  nameChinese         String
  address             String
  telephone           String
  fax                 String
  email               String
  phoneNumber         String
  presentorsReferance String
  logo                String
  Company             Company[]

  @@map("presentorReferences")
}

model ShareCapital {
  id             Int     @id @default(autoincrement())
  companyId      Int
  company        Company @relation(fields: [companyId], references: [id])
  userId         String
  class          String
  totalProposed  Int
  currency       String
  unitPrice      Int
  total          Int
  paid           Int
  unpaid         Int
  rightsAttached String  @default("Voting Rights")

  @@map("shareCapital")
}

model Shareholder {
  id                        Int                 @id @default(autoincrement())
  type                      PersonOrCompanyType
  idNo                      String // companyId or person ID
  idProof                   String
  name                      String
  surname                   String
  address                   String
  addressProof              String
  email                     String
  phone                     String
  sharesDetails             Json // [{ "classOfShares": "Ordinary", "noOfShares": 200, "shareCertificateUrl": 'https://certificate.pdf' }, { "classOfShares": "Preference", "noOfShares": 200, "shareCertificateUrl": 'https://certificate.pdf'  }]
  companyId                 Int
  company                   Company             @relation(fields: [companyId], references: [id])
  NNC1Url                   String?
  ordinaryShareAgreementUrl String?

  @@unique([email, companyId])
  @@map("shareholders")
}

model ShareholderInvite {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  sharesDetails   Json // [{ "type": "Ordinary", "noOfShares": 200 }, { "type": "Preference", "noOfShares": 200 }]
  otp             String
  linkExpiry      DateTime
  isAccepted      Boolean  @default(false)
  invitedByUserId String
  shareholderId   Int? // Optional: Link to the actual Shareholder if accepted
  companyId       Int
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, companyId])
  @@map("shareholderInvites")
}

model Director {
  id                        Int                 @id @default(autoincrement())
  type                      PersonOrCompanyType
  idNo                      String // companyId or person ID
  idProof                   String
  name                      String
  surname                   String
  address                   String
  addressProof              String
  email                     String
  phone                     String
  companyId                 Int
  company                   Company             @relation(fields: [companyId], references: [id])
  NNC1Url                   String?
  minutesUrl                String?

  @@unique([email, companyId])
  @@map("directors")
}

model DirectorInvite {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  otp             String
  linkExpiry      DateTime
  isAccepted      Boolean  @default(false)
  invitedByUserId String // User ID of the inviter
  directorId      Int? // Optional: Link to the actual Director if accepted
  companyId       Int
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, companyId])
  @@map("directorInvites")
}

model CompanySecretary {
  id            Int                 @id @default(autoincrement())
  tcspLicenseNo String
  tcspReason    String
  type          PersonOrCompanyType
  name          String
  surname       String
  idNo          String
  idProof       String
  address       String
  addressProof  String
  email         String
  phone         String
  companyId     Int                 @unique
  company       Company             @relation(fields: [companyId], references: [id])
  NNC1Url       String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("companySecretaries")
}

model NatureofBusiness {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("natureOfBusiness")
}

enum CompanyType {
  PRIVATE
  PUBLIC
}

enum BusinessRegistrationFee {
  ONE_YEAR
  THREE_YEARS
}

enum type {
  admin
  account_user
  guest
}

enum CompanyStatus {
  started
  in_progress
  completed
}

enum PersonOrCompanyType {
  PERSON
  COMPANY
}

enum ProjectType {
  incorporation
}
